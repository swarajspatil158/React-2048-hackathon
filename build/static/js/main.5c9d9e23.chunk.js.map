{"version":3,"sources":["components/HowTo.jsx","actions/index.js","reducers/functions.js","components/GameBoard.js","components/Score.js","components/HowToModal.jsx","components/ShareModal.js","components/Game.js","App.js","reducers/gameReducers.js","reducers/index.js","store.js","index.js"],"names":["pageTranstion","in","opacity","y","out","Tilt","props","options","rest","tilt","useRef","useEffect","VanillaTilt","init","current","ref","scale","speed","max","HowTo","motion","section","initial","animate","exit","variants","className","div","transition","delay","duration","color","size","action","span","p","whileHover","class","h1","to","moveAction","board","direction","type","payload","moveLeft","moveRight","moveUp","moveDown","generateBoard","Array","fill","map","hasValue","value","i","length","j","randomPosition","Math","floor","random","generateRandom","isFull","row","col","compress","newBoard","reverse","rotateLeft","rotateRight","hasDiff","score","merge","nBoard2","nBoard3","moveFunction","main","process","result","isGameOver","over","reason","isGameWon","isGameLost","Cell","number","GameBoard","useSelector","state","gameBoard","dispatch","useDispatch","onKeyDown","e","key","isOver","alert","document","addEventListener","evt","firstTouch","touches","originalEvent","getTouches","xDown","clientX","yDown","clientY","xUp","yUp","xDiff","yDiff","abs","window","removeEventListener","cell","Score","highScore","HowToModal","setModalIsOpen","onClick","id","width","height","src","title","frameborder","allow","allowfullscreen","ShareModal","setIsShareOn","target","href","Game","useState","ModalIsOpen","isShareOn","App","location","useLocation","AnimatePresence","exitBeforeEnter","path","component","exact","initialBoard","initialState","localStorage","getItem","gameReducer","newState","slice","mergeScore","newScore","setItem","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c9d9e23.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./HowTo.css\";\nimport { useEffect,useRef } from \"react\";\nimport { FaGamepad } from \"react-icons/fa\";\nimport { FaArrowUp } from \"react-icons/fa\";\nimport { FaArrowRight } from \"react-icons/fa\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { FaArrowDown } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\nimport {motion} from 'framer-motion';\nimport VanillaTilt from \"vanilla-tilt\";\nconst pageTranstion = {\n  in: {\n    opacity: 1,\n    y: 0,\n  },\n  out: {\n    opacity: 0,\n    y: \"-100%\"\n  }\n}\n\n// tilt component\nfunction Tilt(props) {\n  const { options, ...rest } = props;\n  const tilt = useRef(null);\n\n  useEffect(() => {\n    VanillaTilt.init(tilt.current, options);\n  }, [options]);\n\n  return <div ref={tilt} {...rest} />;\n}\n//  tilt object\n  const options = {\n    scale: 1.2,\n    speed: 1000,\n    max: 30\n  };\nexport default function HowTo() {\n  return (\n    <>\n      <motion.section\n      initial=\"out\"\n      animate=\"in\"\n      exit=\"out\" variants={pageTranstion}>\n        <div className=\"box\">\n          <div className=\"container\">\n            <motion.div className=\"form\" initial={{opacity:0}} animate={{opacity:1,scale:1.2}}\n                    transition={{delay:0.2,duration:0.5}}>\n              <div className=\"title\" >2048</div>\n              <FaGamepad color=\"rgba(255, 255, 255, 0.5)\" size=\"3vh\"/>\n              <FaArrowUp color=\"rgba(255, 255, 255, 0.5)\" size=\"4vh\" />\n\n              <form action=\"\">\n                <div className=\"inputBx\">\n                  <FaArrowLeft color=\"rgba(255, 255, 255, 0.5)\" size=\"4vh\" />\n                  <motion.span >\n                    <motion.p whileHover={{scale:1.1}}>\n                      2048 is a popular single-player game for Web and mobile. It’s a type of “sliding block puzzle”.\n                    </motion.p>\n                  </motion.span>\n                  <FaArrowRight color=\"rgba(255, 255, 255, 0.5)\" size=\"4vh\" />\n                </div>\n              </form>\n                <FaArrowDown class=\"down\" color=\"rgba(255, 255, 255, 0.5)\" size=\"4vh\" />\n              <Tilt h1 options={options}>\n                <Link to=\"/game\">Let's Play</Link>\n              </Tilt>\n            </motion.div>\n          </div>\n        </div>\n      </motion.section>\n    </>\n  );\n}\n","// since we have repeated code for moving action function so this is a reusable function for that\nconst moveAction = (board, direction) => {\n  return {\n    type: `MOVE_${direction}`,\n    payload: board,\n  };\n};\n\n// with the help of moveAction creating moveLeft, moveRight, moveUp, moveDown action functions\nconst moveLeft = (board) => moveAction(board, \"LEFT\");\nconst moveRight = (board) => moveAction(board, \"RIGHT\");\nconst moveUp = (board) => moveAction(board, \"UP\");\nconst moveDown = (board) => moveAction(board, \"DOWN\");\n\n// creating the newGame action function\nconst newGame = () => {\n  return {\n    type: \"NEW_GAME\",\n  };\n};\n\nexport { moveDown, moveLeft, moveRight, moveUp, newGame };\n","// generates empty board\nconst generateBoard = () =>\n  new Array(4).fill(null).map(() => new Array(4).fill(0));\n\n// checks for a value if the board contains the value\nconst hasValue = (board, value) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === value) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// checks if the board is full\nconst isFull = (board) => {\n  return !hasValue(board, 0);\n};\n\n// gets random position\nconst randomPosition = () => {\n  let row = Math.floor(Math.random() * 4);\n  let col = Math.floor(Math.random() * 4);\n  return [row, col];\n};\n\n// generates random cell\nconst generateRandom = (board) => {\n  if (isFull(board)) {\n    return board;\n  }\n\n  let [row, col] = randomPosition();\n  while (board[row][col] !== 0) {\n    [row, col] = randomPosition();\n  }\n\n  board[row][col] = 2;\n  return board;\n};\n\n// compresses the board to the left\nconst compress = (board) => {\n  let newBoard = generateBoard();\n  for (let i = 0; i < board.length; i++) {\n    let col = 0;\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] !== 0) {\n        newBoard[i][col] = board[i][j];\n        col++;\n      }\n    }\n  }\n  return newBoard;\n};\n\n// merges the board to the left if possible\nconst merge = (board) => {\n  let score = 0;\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length - 1; j++) {\n      if (board[i][j] > 0 && board[i][j] === board[i][j + 1]) {\n        score += board[i][j] * 2;\n        board[i][j] = board[i][j] * 2;\n        board[i][j + 1] = 0;\n      }\n    }\n  }\n  return [board, score];\n};\n\n// reverses the board\nconst reverse = (board) => {\n  let newBoard = generateBoard();\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      // turns col0 to col3, col1 to col2, col2 to col1, col3 to col0\n      newBoard[i][j] = board[i][board.length - 1 - j];\n    }\n  }\n  return newBoard;\n};\n\n// rotates anticlockwise 90 deg\nconst rotateLeft = (board) => {\n  let newBoard = generateBoard();\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      // turns row0 to col0, row1 to col1, row2 to col2, row3 to col3\n      newBoard[i][j] = board[j][board.length - 1 - i];\n    }\n  }\n  return newBoard;\n};\n\n// rotates clockwise 90 deg\nconst rotateRight = (board) => {\n  let newBoard = generateBoard();\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      // turns row0 to col3, row1 to col2, row2 to col1, row3 to col0\n      newBoard[i][j] = board[board.length - 1 - j][i];\n    }\n  }\n  return newBoard;\n};\n\n// checks if the board has different elements\nconst hasDiff = (board, newBoard) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] !== newBoard[i][j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// creating the move left function\nconst moveLeft = (board) => {\n  // firstly we compress the board to the left\n  const nBoard1 = compress(board);\n  // then we merge if any two cells are same\n  const [nBoard2, score] = merge(nBoard1);\n  // then we compress the board once more\n  const nBoard3 = compress(nBoard2);\n  // then we adds a new 2 block at random position\n  return [generateRandom(nBoard3), score];\n};\n\n// for making right,up,down we have some repeated code like firstly we have to do something to make it happen for move left then perform moveleft and then revert to its original state\nconst moveFunction = (board, main, process, result) => {\n  // doing some pre required adjustment\n  const nBoard1 = main(board);\n  // performing move left function\n  const [nBoard2, score] = process(nBoard1);\n  // doing some post required adjustment\n  const resBoard = result(nBoard2);\n  // returning the resultant board with score\n  return [resBoard, score];\n};\n\n// using moveFunction for creating moveRight, moveUp, moveDown function\nconst moveRight = (board) => moveFunction(board, reverse, moveLeft, reverse);\nconst moveUp = (board) =>\n  moveFunction(board, rotateLeft, moveLeft, rotateRight);\nconst moveDown = (board) =>\n  moveFunction(board, rotateRight, moveLeft, rotateLeft);\n\n// checks if the board contains 2048 so the game is ended and the user has won the game\nconst isGameWon = (board) => hasValue(board, 2048);\n\n// so we check if there is any possibility to merge the block if yes then our game is not over otherwise if no possibility to merge blocks then our game is over and we lose\nconst isGameLost = (board) =>\n  !(\n    hasDiff(board, moveLeft(board)[0]) ||\n    hasDiff(board, moveRight(board)[0]) ||\n    hasDiff(board, moveUp(board)[0]) ||\n    hasDiff(board, moveDown(board)[0])\n  );\n\n// checking if game is over either by winning or losing\nconst isGameOver = (board) => {\n  let over = false,\n    reason = \"\";\n  if (isGameWon(board)) {\n    over = true;\n    reason = \"won\";\n  } else if (isGameLost(board)) {\n    over = true;\n    reason = \"lost\";\n  }\n  return [over, reason];\n};\n\nexport {\n  generateBoard,\n  generateRandom,\n  moveLeft,\n  moveRight,\n  moveUp,\n  moveDown,\n  isGameOver,\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { moveDown, moveLeft, moveRight, moveUp } from \"../actions/index\";\nimport { useEffect,useRef } from \"react\";\nimport { isGameOver } from \"../reducers/functions\";\nimport VanillaTilt from \"vanilla-tilt\";\n\n// a cell component\nconst Cell = ({ number }) => (\n  <div className={`cell number color-${number}`}>\n    {number > 0 ? number : \"\"}\n  </div>\n);\n\n\n// tilt component\nfunction Tilt(props) {\n  const { options, ...rest } = props;\n  const tilt = useRef(null);\n\n  useEffect(() => {\n    VanillaTilt.init(tilt.current, options);\n  }, [options]);\n\n  return <div ref={tilt} {...rest} />;\n}\nconst GameBoard = () => {\n  // getting the board\n  const board = useSelector((state) => state.gameBoard).board;\n  const dispatch = useDispatch();\n\n  //   keydown and what to perform\n  const onKeyDown = (e) => {\n    switch (e.key) {\n      case \"ArrowLeft\":\n        dispatch(moveLeft(board));\n        break;\n      case \"ArrowRight\":\n        dispatch(moveRight(board));\n        break;\n      case \"ArrowUp\":\n        dispatch(moveUp(board));\n        break;\n      case \"ArrowDown\":\n        dispatch(moveDown(board));\n        break;\n\n      default:\n        return;\n    }\n    let [isOver, reason] = isGameOver(board);\n    // check if the game is over\n    if (isOver) {\n      alert(`game is over! you ${reason}`);\n    }\n  };\n  //  tilt object\n  const options = {\n    scale: 1.2,\n    speed: 1000,\n    max: 30\n  };\n  //   addition and removal of event listener for moves\n  useEffect(() => {\n    \n    document.addEventListener('touchstart', handleTouchStart, false);\n    document.addEventListener('touchmove', handleTouchMove, false);\n\n    var xDown = null;\n    var yDown = null;\n\n    function getTouches(evt) {\n      return evt.touches ||             // browser API\n        evt.originalEvent.touches; // jQuery\n    }\n\n    function handleTouchStart(evt) {\n      const firstTouch = getTouches(evt)[0];\n      xDown = firstTouch.clientX;\n      yDown = firstTouch.clientY;\n    };\n\n    function handleTouchMove(evt) {\n      if (!xDown || !yDown) {\n        return;\n      }\n\n      var xUp = evt.touches[0].clientX;\n      var yUp = evt.touches[0].clientY;\n\n      var xDiff = xDown - xUp;\n      var yDiff = yDown - yUp;\n\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {/*most significant*/\n        if (xDiff > 0) {\n          /*to left swipe*/\n          dispatch(moveLeft(board));\n        } else {\n          /* to right swipe */\n          dispatch(moveRight(board));\n        }\n      } else {\n        if (yDiff > 0) {\n          /* to up swipe */\n          dispatch(moveUp(board));\n          \n        } else {\n          /* to down swipe */\n          dispatch(moveDown(board));\n        }\n      }\n      /* reset values */\n      xDown = null;\n      yDown = null;\n    };\n\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\n  });\n  return (\n    <Tilt className=\"game-board\" options={options}>\n      {board.map((row, i) => {\n        return (\n          <div key={`row-${i}`} className=\"row\">\n            {row.map((cell, j) => (\n              <Cell key={`cell-${i}-${j}`} number={cell} />\n            ))}\n          </div>\n        );\n      })}\n      </Tilt>\n  );\n};\n\nexport default GameBoard;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst Score = () => {\n  // getting the score and highscore state from the state\n  const score = useSelector((state) => state.gameBoard).score;\n  const highScore = useSelector((state) => state.gameBoard).highScore;\n  return (\n    <div className=\"scoreBoard\">\n      <div>SCORE<br></br>{score}</div> \n      <div>HIGHSCORE<br></br>{highScore}</div>\n    </div>\n  );\n};\n\nexport default Score;\n","const HowToModal = ({setModalIsOpen})=>{\n    return(<>\n        <div className=\"how-to-modal\" onClick={() => setModalIsOpen(false)}>\n    </div>\n        <div className=\"Modal-main-box\">\n            <div id=\"Modal-Close\" onClick={() => setModalIsOpen(false)}>X</div>\n            <h2>How to Play</h2>\n            <p>Use your arrow keys to move the tiles.Tiles with the same number merge into one when they touch. Add them up to reach 2048 !</p>\n                <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/aJlHNKPX_OE?controls=0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>            </div>\n    </>)\n}\n\nexport default HowToModal;","import {\n    FaWhatsapp,\n    FaTwitter,\n    FaTelegramPlane\n} from \"react-icons/fa\";\nconst ShareModal = ({setIsShareOn}) => {\n    return(<>\n\n        <div className=\"share-modal\" onClick={() => setIsShareOn(false)}>\n        </div>\n        <div className=\"share-main-box\">\n            <div id=\"Modal-Close\" onClick={() => setIsShareOn(false)}>X</div>\n            <h2>Share Us</h2>\n            <p>Share our website and help us to reach more and more people.</p>\n            <p>Thank you 🤍\n            <div className=\"btn-group\">\n                    <a className=\"social-btn\" target=\"_blank\" href=\"whatsapp://send?text=Check this amazing 2048 Maths Mind Game... https://2048-hackathon.netlify.app/\"> <FaWhatsapp></FaWhatsapp> </a>\n                    <a className=\"social-btn\" target=\"_blank\" href=\"https://twitter.com/intent/tweet?text=Check%20this%20amazing%202048%20Maths%20Mind%20Game...%20https%3A%2F%2F2048-hackathon.netlify.app%2F\"> <FaTwitter></FaTwitter> </a>\n                    <a className=\"social-btn\" target=\"_blank\" href=\"https://t.me/share/url?url=https://2048-hackathon.netlify.app/&text=Check%20this%20amazing%202048%20Maths%20Mind%20Game...https://2048-hackathon.netlify.app/\"> <FaTelegramPlane></FaTelegramPlane> </a>\n\n            </div>\n            </p>\n        </div>\n           </>)\n}\n\nexport default ShareModal;","import React,{useState} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { newGame } from \"../actions/index\";\nimport {motion} from \"framer-motion\";\nimport GameBoard from \"./GameBoard\";\nimport Score from \"./Score\";\nimport HowToModal from \"./HowToModal.jsx\";\nimport \"./HowToModal.css\";\nimport { FaHome } from \"react-icons/fa\";\nimport ShareModal from \"./ShareModal.js\";\nimport \"./ShareModal.css\";\n//  transition motion\nconst pageTranstion = {\n  in: {\n      opacity: 1,\n      y: 0,\n  },\n  out: {\n      opacity: 0,\n      y: \"-100%\"\n  }\n}\n\nconst Game = () => {\n  const [ModalIsOpen, setModalIsOpen] = useState(false);\n  const [isShareOn,setIsShareOn] = useState(false);\n  // dispatch function for creating newGame\n  const dispatch = useDispatch();\n  return (\n    <motion.div \n    initial=\"out\"\n      animate=\"in\"\n    exit=\"out\" variants={pageTranstion}\n      className=\"game\">\n      <div className=\"go-to-home\"><a href=\"/\"> <FaHome></FaHome></a></div>\n      <div className=\"game-controls\">\n        <button onClick={()=>{setModalIsOpen(true)}}>How to Play</button>\n        {ModalIsOpen?\n        (<HowToModal setModalIsOpen={setModalIsOpen}></HowToModal>)\n        :null\n        }\n        <button onClick={() => dispatch(newGame())}>New Game</button>\n        <button onClick={() => setIsShareOn(true)}>Share</button>\n        {isShareOn ?\n          (<ShareModal setIsShareOn={setIsShareOn}></ShareModal>)\n          : null\n        }\n\n      </div>\n      <Score />\n      <GameBoard />\n      <footer>\n        <div>Made by Team Aditya ✨</div>\n        <div>Contributers - <a href=\"https://github.com/swarajspatil158\">Swaraj</a>, <a href=\"https://github.com/siddharth20190428/\">Siddharth</a>, <a href=\"https://github.com/Dhrumil0723/\">Venom</a>,<a href=\"https://github.com/lord-Rheagar/\">Tyrion</a>, <a href=\"https://github.com/abhaygupta08\">Abhay</a></div>\n      </footer>\n    </motion.div>\n  );\n};\n\nexport default Game;\n","import \"./App.css\";\nimport HowTo from \"./components/HowTo\";\nimport {\n  Route, \n  Switch ,\n  useLocation} from \"react-router-dom\";\nimport { AnimatePresence } from \"framer-motion\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  const location = useLocation();\n  return (\n    <div className=\"App\">\n      \n      <AnimatePresence exitBeforeEnter>\n      <Switch location={location} key={location.key}>\n        <Route\n          path=\"/game\"\n          component= {Game}\n        />\n        <Route exact path=\"/\" component={HowTo} />\n      </Switch>\n      </AnimatePresence>\n      </div>\n  );\n}\n\nexport default App;\n","import {\n  generateBoard,\n  moveLeft,\n  moveRight,\n  moveUp,\n  generateRandom,\n  moveDown,\n} from \"./functions\";\n\n// initialising the empty board with a 2 block\nlet initialBoard = generateBoard();\ninitialBoard = generateRandom(initialBoard);\n// getting the highscore stored in localstorage\nlet highScore = localStorage.getItem(\"highScore\") || 0;\n\n// setting initial state\nlet initialState = { board: initialBoard, score: 0, highScore: highScore };\n\nconst gameReducer = (state = initialState, action) => {\n  let newState = { ...state };\n\n  // checking if the action is related to moving of board\n  if (action.type.slice(0, 4) === \"MOVE\") {\n    let [newBoard, mergeScore, newScore] = [[], 0, 0];\n\n    if (action.type === \"MOVE_LEFT\") {\n      [newBoard, mergeScore] = moveLeft(action.payload);\n    } else if (action.type === \"MOVE_RIGHT\") {\n      [newBoard, mergeScore] = moveRight(action.payload);\n    } else if (action.type === \"MOVE_UP\") {\n      [newBoard, mergeScore] = moveUp(action.payload);\n    } else if (action.type === \"MOVE_DOWN\") {\n      [newBoard, mergeScore] = moveDown(action.payload);\n    }\n\n    // adding up the score\n    newScore = state.score + mergeScore;\n    newState = { ...state, board: newBoard, score: newScore };\n\n    // checking if the score is greater than highscore if so then setting the new high score\n    if (newScore > state.highScore) {\n      newState.highScore = newScore;\n      localStorage.setItem(\"highScore\", newScore);\n    }\n  } else if (action.type === \"NEW_GAME\") {\n    // if its a new game then resets the board, generates a 2 block and then setting score to 0\n    let newBoard = generateBoard();\n    newBoard = generateRandom(newBoard);\n    newState.board = newBoard;\n    newState.score = 0;\n  }\n  return newState;\n};\n\nexport default gameReducer;\n","import { combineReducers } from \"redux\";\nimport gameReducer from \"./gameReducers\";\n\n// combining if there is more than one reducer\nconst rootReducer = combineReducers({ gameBoard: gameReducer });\n\nexport default rootReducer;\n","import rootReducer from \"./reducers/index\";\nimport { createStore } from \"redux\";\n\n// providing the root reducer for redux to the react app\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      {/* providing the store to the react app */}\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}